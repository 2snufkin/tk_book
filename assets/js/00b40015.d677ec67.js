"use strict";(self.webpackChunktkbook=self.webpackChunktkbook||[]).push([[7179],{6684:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var t=i(4848),o=i(8453);const r={},s="User Rights and Conditions Documentation",a={id:"Tumorotek/User Rights",title:"User Rights and Conditions Documentation",description:"This document provides guidelines on how to conditionally perform actions based on user rights within the system.",source:"@site/docs/Tumorotek/User Rights.md",sourceDirName:"Tumorotek",slug:"/Tumorotek/User Rights",permalink:"/tk_book/docs/Tumorotek/User Rights",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Testing DAO Classes:",permalink:"/tk_book/docs/Tumorotek/Unit Tests"},next:{title:"Controller Annotations",permalink:"/tk_book/docs/ZK/Annotations"}},d={},l=[{value:"Tables in the DB",id:"tables-in-the-db",level:2},{value:"Overview",id:"overview",level:2},{value:"Functions Used",id:"functions-used",level:2},{value:"<code>getDroitOnAction</code>",id:"getdroitonaction",level:3},{value:"Syntax",id:"syntax",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Implementation",id:"implementation",level:4},{value:"Conditional Logic",id:"conditional-logic",level:2},{value:"Explanation",id:"explanation",level:3},{value:"Example Usage",id:"example-usage",level:2},{value:"Recommendation: Use Enums to Avoid Hard Coding",id:"recommendation-use-enums-to-avoid-hard-coding",level:2},{value:"Problem with Hard Coding",id:"problem-with-hard-coding",level:3},{value:"Solution: Use Enums",id:"solution-use-enums",level:3},{value:"Define Enums",id:"define-enums",level:4},{value:"Update <code>getDroitOnAction</code> Method",id:"update-getdroitonaction-method",level:4},{value:"Update Conditional Logic",id:"update-conditional-logic",level:4},{value:"Summary",id:"summary",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"user-rights-and-conditions-documentation",children:"User Rights and Conditions Documentation"})}),"\n",(0,t.jsx)(n.p,{children:"This document provides guidelines on how to conditionally perform actions based on user rights within the system."}),"\n",(0,t.jsx)(n.h2,{id:"tables-in-the-db",children:"Tables in the DB"}),"\n",(0,t.jsx)(n.p,{children:"The operations trights are found in the table operation_type.\r\nOperations that are done by the user and that are found in this table are (even login) are saved in the table operation."}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:'In the system, actions are controlled based on user permissions. Permissions are determined by functions that check if a user has the right to perform certain actions. This document explains how to conditionally perform actions if a user has the required rights for "Echantillon" (Modification) and "Stockage" (Consultation).'}),"\n",(0,t.jsx)(n.h2,{id:"functions-used",children:"Functions Used"}),"\n",(0,t.jsx)(n.h3,{id:"getdroitonaction",children:(0,t.jsx)(n.code,{children:"getDroitOnAction"})}),"\n",(0,t.jsx)(n.p,{children:"This function checks if the user has the right to perform a specific action on a specific entity."}),"\n",(0,t.jsx)(n.h4,{id:"syntax",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public boolean getDroitOnAction(final String nomEntite, final String nomOperation)\n"})}),"\n",(0,t.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"nomEntite"}),': The entity on which the action is to be performed (e.g., "Echantillon", "Stockage").']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"nomOperation"}),': The action to be performed on the entity (e.g., "Modification", "Consultation").']}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"true"})," if the user has the right to perform the action on the entity."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"false"})," otherwise."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"implementation",children:"Implementation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public boolean getDroitOnAction(final String nomEntite, final String nomOperation) {\r\n    Boolean admin = false;\r\n    if(sessionScope.containsKey("Admin")) {\r\n        admin = (Boolean) sessionScope.get("Admin");\r\n    }\r\n\r\n    // si l\'utilisateur est admin => bouton cliquable\r\n    if(admin) {\r\n        return true;\r\n    }\r\n    \r\n    // on extrait l\'OperationType de la base\r\n    final OperationType operation = ManagerLocator.getOperationTypeManager().findByNomLikeManager(nomOperation, true).get(0);\r\n\r\n    Hashtable<String, List<OperationType>> droits = new Hashtable<>();\r\n\r\n    if(sessionScope.containsKey("Droits")) {\r\n        // on extrait les droits de l\'utilisateur\r\n        droits = (Hashtable<String, List<OperationType>>) sessionScope.get("Droits");\r\n\r\n        final List<OperationType> ops = droits.get(nomEntite);\r\n        return ops.contains(operation);\r\n    }\r\n    return false;\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"conditional-logic",children:"Conditional Logic"}),"\n",(0,t.jsxs)(n.p,{children:["To perform an action based on user rights, we use conditional statements that combine the results of ",(0,t.jsx)(n.code,{children:"getDroitOnAction"})," calls. The condition we are examining is as follows:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'if (conditionA || (getDroitOnAction("Echantillon", "Modification") && getDroitOnAction("Stockage", "Consultation"))) {\r\n    // Perform the action\r\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"explanation",children:"Explanation"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"conditionA"})}),": This is a pre-existing condition that, if true, allows the action to be performed without checking further permissions."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:'getDroitOnAction("Echantillon", "Modification")'})}),': This checks if the user has the right to modify an "Echantillon".']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:'getDroitOnAction("Stockage", "Consultation")'})}),': This checks if the user has the right to consult a "Stockage".']}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The action is performed if either ",(0,t.jsx)(n.code,{children:"conditionA"})," is true or both ",(0,t.jsx)(n.code,{children:'getDroitOnAction("Echantillon", "Modification")'})," and ",(0,t.jsx)(n.code,{children:'getDroitOnAction("Stockage", "Consultation")'})," are true."]}),"\n",(0,t.jsx)(n.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,t.jsx)(n.p,{children:"Here is an example in JavaScript:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// Pre-existing condition\r\nvar conditionA = true; // or some other condition\r\n\r\n// Check user rights and perform action accordingly\r\nif (conditionA || (getDroitOnAction("Echantillon", "Modification") && getDroitOnAction("Stockage", "Consultation"))) {\r\n    // User has the required rights\r\n    console.log("User has the required rights. Performing the action...");\r\n    // Perform the action here\r\n} else {\r\n    // User does not have the required rights\r\n    console.log("User does not have the required rights. Action is not allowed.");\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"recommendation-use-enums-to-avoid-hard-coding",children:"Recommendation: Use Enums to Avoid Hard Coding"}),"\n",(0,t.jsx)(n.h3,{id:"problem-with-hard-coding",children:"Problem with Hard Coding"}),"\n",(0,t.jsxs)(n.p,{children:["Hard coding strings like ",(0,t.jsx)(n.code,{children:'"Echantillon"'})," and ",(0,t.jsx)(n.code,{children:'"Modification"'})," can lead to errors, makes the code harder to maintain, and reduces readability."]}),"\n",(0,t.jsx)(n.h3,{id:"solution-use-enums",children:"Solution: Use Enums"}),"\n",(0,t.jsx)(n.p,{children:"Enums provide a way to define a set of named values. By using enums, we can avoid hard coding and make our code more maintainable and less error-prone."}),"\n",(0,t.jsx)(n.h4,{id:"define-enums",children:"Define Enums"}),"\n",(0,t.jsx)(n.p,{children:"First, define enums for entities and operations:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public enum EntityType {\r\n    ECHANTILLON,\r\n    STOCKAGE,\r\n    // Add other entities here\r\n}\r\n\r\npublic enum OperationType {\r\n    MODIFICATION,\r\n    CONSULTATION,\r\n    // Add other operations here\r\n}\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"update-getdroitonaction-method",children:["Update ",(0,t.jsx)(n.code,{children:"getDroitOnAction"})," Method"]}),"\n",(0,t.jsxs)(n.p,{children:["Update the ",(0,t.jsx)(n.code,{children:"getDroitOnAction"})," method to use enums instead of strings:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public boolean getDroitOnAction(final EntityType entityType, final OperationType operationType) {\r\n    Boolean admin = false;\r\n    if(sessionScope.containsKey("Admin")) {\r\n        admin = (Boolean) sessionScope.get("Admin");\r\n    }\r\n\r\n    if(admin) {\r\n        return true;\r\n    }\r\n\r\n    final OperationType operation = ManagerLocator.getOperationTypeManager().findByNomLikeManager(operationType.name(), true).get(0);\r\n\r\n    Hashtable<EntityType, List<OperationType>> droits = new Hashtable<>();\r\n\r\n    if(sessionScope.containsKey("Droits")) {\r\n        droits = (Hashtable<EntityType, List<OperationType>>) sessionScope.get("Droits");\r\n\r\n        final List<OperationType> ops = droits.get(entityType);\r\n        return ops.contains(operation);\r\n    }\r\n    return false;\r\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"update-conditional-logic",children:"Update Conditional Logic"}),"\n",(0,t.jsx)(n.p,{children:"Update the conditional logic to use enums:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"if (conditionA || (getDroitOnAction(EntityType.ECHANTILLON, OperationType.MODIFICATION) && getDroitOnAction(EntityType.STOCKAGE, OperationType.CONSULTATION))) {\r\n    // Perform the action\r\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"By using enums, the code becomes more readable, maintainable, and less prone to errors."}),"\n",(0,t.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,t.jsxs)(n.p,{children:['This document outlined how to conditionally perform actions based on user permissions for modifying "Echantillon" and consulting "Stockage". By using the ',(0,t.jsx)(n.code,{children:"getDroitOnAction"})," function, we can ensure that actions are only performed by users with the appropriate rights. Additionally, using enums instead of hard-coded strings improves code quality and maintainability. The provided examples demonstrate how to implement these best practices in a practical scenario."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var t=i(6540);const o={},r=t.createContext(o);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);