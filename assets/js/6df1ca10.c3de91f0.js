"use strict";(self.webpackChunktkbook=self.webpackChunktkbook||[]).push([[9417],{839:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var i=t(4848),r=t(8453);const a={},s="DAO Implementation Guide",o={id:"Java & Spring/DAO Implementation",title:"DAO Implementation Guide",description:"This tutorial will guide you through creating and working with Data Access Objects (DAOs) in the Tumorotek application.",source:"@site/docs/Java & Spring/DAO Implementation.md",sourceDirName:"Java & Spring",slug:"/Java & Spring/DAO Implementation",permalink:"/tk_book/Java & Spring/DAO Implementation",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Repository, Manager, and Test",permalink:"/tk_book/Java & Spring/Creating new Entity"},next:{title:"Entites",permalink:"/tk_book/Java & Spring/Entites"}},c={},l=[{value:"1. Creating a DAO Interface",id:"1-creating-a-dao-interface",level:2},{value:"2. Understanding DAO Method Naming",id:"2-understanding-dao-method-naming",level:2},{value:"3. Configuring the DAO Bean",id:"3-configuring-the-dao-bean",level:2},{value:"4. Service Layer Integration",id:"4-service-layer-integration",level:2},{value:"5. Testing DAOs",id:"5-testing-daos",level:2},{value:"6. Test Configuration",id:"6-test-configuration",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Common Issues and Solutions",id:"common-issues-and-solutions",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"dao-implementation-guide",children:"DAO Implementation Guide"})}),"\n",(0,i.jsx)(n.p,{children:"This tutorial will guide you through creating and working with Data Access Objects (DAOs) in the Tumorotek application."}),"\n",(0,i.jsx)(n.h2,{id:"1-creating-a-dao-interface",children:"1. Creating a DAO Interface"}),"\n",(0,i.jsxs)(n.p,{children:["First, create an interface that extends ",(0,i.jsx)(n.code,{children:"GenericDaoJpa"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// Example: UserDao.java\npublic interface UserDao extends GenericDaoJpa<User, Long> {\n    User findById(Long id);\n    List<User> findByUsername(String username);\n    // Add other specific methods as needed\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"2-understanding-dao-method-naming",children:"2. Understanding DAO Method Naming"}),"\n",(0,i.jsx)(n.p,{children:"Spring Data JPA automatically implements methods based on their names. The naming convention follows a specific pattern:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// Common naming patterns:\nfindBy<PropertyName>(<PropertyType> property)\nfindBy<PropertyName>And<PropertyName>(<PropertyType> prop1, <PropertyType> prop2)\nfindBy<PropertyName>OrderBy<PropertyName>Asc/Desc(<PropertyType> property)\n\n// Real examples:\nList<Echantillon> findByCode(String code);\nOptional<User> findByEmailAndActive(String email, boolean active);\nList<Sample> findByDateCreatedOrderByCodeDesc(LocalDateTime dateCreated);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"3-configuring-the-dao-bean",children:"3. Configuring the DAO Bean"}),"\n",(0,i.jsxs)(n.p,{children:["Add your DAO configuration to ",(0,i.jsx)(n.code,{children:"applicationContextDao.xml"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'\x3c!-- applicationContextDao.xml --\x3e\n<beans>\n    \x3c!-- Define your DAO bean --\x3e\n    <bean id="userDao" parent="abstractDao">\n        <property name="proxyInterfaces">\n            <value>com.example.dao.UserDao</value>\n        </property>\n        <property name="target">\n            <bean parent="abstractDaoTarget">\n                <constructor-arg>\n                    <value>com.example.entity.User</value>\n                </constructor-arg>\n            </bean>\n        </property>\n    </bean>\n</beans>\n'})}),"\n",(0,i.jsx)(n.h2,{id:"4-service-layer-integration",children:"4. Service Layer Integration"}),"\n",(0,i.jsx)(n.p,{children:"Configure your service to use the DAO:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'\x3c!-- applicationContext.xml --\x3e\n<beans>\n    <bean id="userService" class="com.example.service.UserServiceImpl">\n        <property name="userDao" ref="userDao" />\n        \x3c!-- Add other required dependencies --\x3e\n    </bean>\n</beans>\n'})}),"\n",(0,i.jsx)(n.h2,{id:"5-testing-daos",children:"5. Testing DAOs"}),"\n",(0,i.jsxs)(n.p,{children:["Create a test class extending ",(0,i.jsx)(n.code,{children:"AbstractDaoTest"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class UserDaoTest extends AbstractDaoTest {\n    private UserDao userDao;\n    \n    @Before\n    public void setUp() {\n        // Setup test data\n    }\n    \n    @Test\n    public void testFindById() {\n        User user = userDao.findById(1L);\n        assertNotNull(user);\n        assertEquals("expectedUsername", user.getUsername());\n    }\n    \n    // Setter for Spring injection\n    public void setUserDao(UserDao userDao) {\n        this.userDao = userDao;\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"6-test-configuration",children:"6. Test Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["Include your tests in ",(0,i.jsx)(n.code,{children:"pom.xml"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:"<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-surefire-plugin</artifactId>\n            <version>3.0.0-M5</version>\n            <configuration>\n                <includes>\n                    <include>**/*Test.java</include>\n                </includes>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Always define clear method names that reflect their purpose"}),"\n",(0,i.jsx)(n.li,{children:"Use appropriate return types (List, Optional, etc.)"}),"\n",(0,i.jsx)(n.li,{children:"Include proper documentation for complex queries"}),"\n",(0,i.jsx)(n.li,{children:"Write comprehensive tests for all DAO methods"}),"\n",(0,i.jsx)(n.li,{children:"Follow naming conventions consistently"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"common-issues-and-solutions",children:"Common Issues and Solutions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If your DAO methods aren't being recognized, verify the method naming follows Spring Data JPA conventions"}),"\n",(0,i.jsxs)(n.li,{children:["For complex queries, consider using ",(0,i.jsx)(n.code,{children:"@Query"})," annotation instead of method names"]}),"\n",(0,i.jsx)(n.li,{children:"Ensure proper transaction management is configured"}),"\n",(0,i.jsx)(n.li,{children:"Check entity mapping if you encounter persistence issues"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var i=t(6540);const r={},a=i.createContext(r);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);