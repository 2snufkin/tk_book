"use strict";(self.webpackChunktkbook=self.webpackChunktkbook||[]).push([[3083],{8793:(e,l,n)=>{n.r(l),n.d(l,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"ZK/Listbox","title":"ZK Framework: Listbox Component Manual","description":"The Listbox component in ZK Framework is a versatile UI component used to display a list of items in a tabular format. It is highly customizable, supports data binding, and can be used for both simple and complex data representations. This manual provides a comprehensive overview of the Listbox component, including its subcomponents, attributes, events, data binding capabilities, and practical examples.","source":"@site/docs/ZK/Listbox.md","sourceDirName":"ZK","slug":"/ZK/Listbox","permalink":"/tk_book/ZK/Listbox","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Grid","permalink":"/tk_book/ZK/Grid"},"next":{"title":"MVC vs MVVM","permalink":"/tk_book/ZK/Mvc Vs Mvvm"}}');var s=n(4848),t=n(8453);const r={},d="ZK Framework: Listbox Component Manual",a={},o=[{value:"Listbox Components",id:"listbox-components",level:2},{value:"Listbox",id:"listbox",level:3},{value:"Listhead",id:"listhead",level:3},{value:"Listheader",id:"listheader",level:3},{value:"Listitem",id:"listitem",level:3},{value:"Listcell",id:"listcell",level:3},{value:"Attributes and Properties",id:"attributes-and-properties",level:2},{value:"Listbox Attributes",id:"listbox-attributes",level:3},{value:"Listheader Attributes",id:"listheader-attributes",level:3},{value:"Listitem Attributes",id:"listitem-attributes",level:3},{value:"Listcell Attributes",id:"listcell-attributes",level:3},{value:"Events and Listeners",id:"events-and-listeners",level:2},{value:"Selection Events",id:"selection-events",level:3},{value:"Sorting Events",id:"sorting-events",level:3},{value:"Data Binding",id:"data-binding",level:2},{value:"Model Binding",id:"model-binding",level:3},{value:"Renderer Binding",id:"renderer-binding",level:3},{value:"Examples",id:"examples",level:2},{value:"Basic Listbox",id:"basic-listbox",level:3},{value:"Listbox with Data Binding",id:"listbox-with-data-binding",level:3},{value:"Listbox with Custom Renderer",id:"listbox-with-custom-renderer",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Customizing Appearance with CSS",id:"1-customizing-appearance-with-css",level:2},{value:"Example",id:"example",level:3},{value:"Adding Inline Styles",id:"adding-inline-styles",level:3},{value:"2. Customizing Content with Templates",id:"2-customizing-content-with-templates",level:2},{value:"Example",id:"example-1",level:3},{value:"3. Using a Custom Renderer",id:"3-using-a-custom-renderer",level:2},{value:"Example",id:"example-2",level:3},{value:"Java Implementation",id:"java-implementation",level:4},{value:"ZUL Implementation with Binding",id:"zul-implementation-with-binding",level:4},{value:"4. Customizing Behavior with Events",id:"4-customizing-behavior-with-events",level:2},{value:"Example",id:"example-3",level:3},{value:"Handling Selection Event",id:"handling-selection-event",level:4},{value:"In the ViewModel",id:"in-the-viewmodel",level:4},{value:"Example",id:"example-4",level:3},{value:"Handling Sorting Event",id:"handling-sorting-event",level:4},{value:"In the ViewModel",id:"in-the-viewmodel-1",level:4},{value:"5. Customizing Pagination",id:"5-customizing-pagination",level:2},{value:"Example",id:"example-5",level:3},{value:"Customizing the Paging Component",id:"customizing-the-paging-component",level:3},{value:"6. Adding Checkboxes or Radio Buttons",id:"6-adding-checkboxes-or-radio-buttons",level:2},{value:"Example",id:"example-6",level:3},{value:"Using Checkboxes",id:"using-checkboxes",level:4},{value:"Using Radio Buttons",id:"using-radio-buttons",level:4},{value:"7. Customizing Selection Mode",id:"7-customizing-selection-mode",level:2},{value:"Single Selection",id:"single-selection",level:3},{value:"Multiple Selection",id:"multiple-selection",level:3},{value:"8. Using Different Molds",id:"8-using-different-molds",level:2},{value:"Example",id:"example-7",level:3},{value:"Default Mold",id:"default-mold",level:4},{value:"Paging Mold",id:"paging-mold",level:4}];function c(e){const l={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(l.header,{children:(0,s.jsx)(l.h1,{id:"zk-framework-listbox-component-manual",children:"ZK Framework: Listbox Component Manual"})}),"\n",(0,s.jsxs)(l.p,{children:["The ",(0,s.jsx)(l.code,{children:"Listbox"})," component in ZK Framework is a versatile UI component used to display a list of items in a tabular format. It is highly customizable, supports data binding, and can be used for both simple and complex data representations. This manual provides a comprehensive overview of the ",(0,s.jsx)(l.code,{children:"Listbox"})," component, including its subcomponents, attributes, events, data binding capabilities, and practical examples."]}),"\n",(0,s.jsx)(l.h2,{id:"listbox-components",children:"Listbox Components"}),"\n",(0,s.jsx)(l.h3,{id:"listbox",children:"Listbox"}),"\n",(0,s.jsxs)(l.p,{children:["The ",(0,s.jsx)(l.code,{children:"Listbox"})," is the main container that holds the list of items and columns. It is used to display data in rows and columns, similar to a table."]}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-xml",children:"<listbox></listbox>\n"})}),"\n",(0,s.jsx)(l.h3,{id:"listhead",children:"Listhead"}),"\n",(0,s.jsxs)(l.p,{children:["The ",(0,s.jsx)(l.code,{children:"Listhead"})," component is used to define the header of the ",(0,s.jsx)(l.code,{children:"Listbox"}),". It contains ",(0,s.jsx)(l.code,{children:"Listheader"})," elements that represent the columns."]}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-xml",children:"<listhead></listhead>\n"})}),"\n",(0,s.jsx)(l.h3,{id:"listheader",children:"Listheader"}),"\n",(0,s.jsxs)(l.p,{children:["The ",(0,s.jsx)(l.code,{children:"Listheader"})," component represents a single column header in the ",(0,s.jsx)(l.code,{children:"Listbox"}),". It defines the column's label and can include attributes for sorting and alignment."]}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-xml",children:'<listheader label="Column 1"></listheader>\n'})}),"\n",(0,s.jsx)(l.h3,{id:"listitem",children:"Listitem"}),"\n",(0,s.jsxs)(l.p,{children:["The ",(0,s.jsx)(l.code,{children:"Listitem"})," component represents a single row in the ",(0,s.jsx)(l.code,{children:"Listbox"}),". It contains ",(0,s.jsx)(l.code,{children:"Listcell"})," elements that represent the data in each column for that row."]}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-xml",children:"<listitem></listitem>\n"})}),"\n",(0,s.jsx)(l.h3,{id:"listcell",children:"Listcell"}),"\n",(0,s.jsxs)(l.p,{children:["The ",(0,s.jsx)(l.code,{children:"Listcell"})," component represents a single cell in a ",(0,s.jsx)(l.code,{children:"Listitem"}),". It holds the data for a particular column in that row."]}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-xml",children:'<listcell label="Data"></listcell>\n'})}),"\n",(0,s.jsx)(l.h2,{id:"attributes-and-properties",children:"Attributes and Properties"}),"\n",(0,s.jsx)(l.h3,{id:"listbox-attributes",children:"Listbox Attributes"}),"\n",(0,s.jsxs)(l.ul,{children:["\n",(0,s.jsxs)(l.li,{children:[(0,s.jsx)(l.strong,{children:(0,s.jsx)(l.code,{children:"mold"})}),": Defines the appearance of the ",(0,s.jsx)(l.code,{children:"Listbox"}),". Common values are ",(0,s.jsx)(l.code,{children:'"default"'})," and ",(0,s.jsx)(l.code,{children:'"paging"'}),"."]}),"\n",(0,s.jsxs)(l.li,{children:[(0,s.jsx)(l.strong,{children:(0,s.jsx)(l.code,{children:"rows"})}),": Specifies the number of rows to display. If the number of items exceeds this, a scrollbar is shown."]}),"\n",(0,s.jsxs)(l.li,{children:[(0,s.jsx)(l.strong,{children:(0,s.jsx)(l.code,{children:"multiple"})}),": Enables multiple selections when set to ",(0,s.jsx)(l.code,{children:"true"}),"."]}),"\n",(0,s.jsxs)(l.li,{children:[(0,s.jsx)(l.strong,{children:(0,s.jsx)(l.code,{children:"checkmark"})}),": Displays checkboxes for item selection when set to ",(0,s.jsx)(l.code,{children:"true"}),"."]}),"\n",(0,s.jsxs)(l.li,{children:[(0,s.jsx)(l.strong,{children:(0,s.jsx)(l.code,{children:"itemRenderer"})}),": Specifies a custom renderer for list items."]}),"\n",(0,s.jsxs)(l.li,{children:[(0,s.jsx)(l.strong,{children:(0,s.jsx)(l.code,{children:"model"})}),": Binds the ",(0,s.jsx)(l.code,{children:"Listbox"})," to a data model (usually a ",(0,s.jsx)(l.code,{children:"ListModel"}),")."]}),"\n"]}),"\n",(0,s.jsx)(l.h3,{id:"listheader-attributes",children:"Listheader Attributes"}),"\n",(0,s.jsxs)(l.ul,{children:["\n",(0,s.jsxs)(l.li,{children:[(0,s.jsx)(l.strong,{children:(0,s.jsx)(l.code,{children:"label"})}),": Sets the label of the column header."]}),"\n",(0,s.jsxs)(l.li,{children:[(0,s.jsx)(l.strong,{children:(0,s.jsx)(l.code,{children:"align"})}),": Aligns the content of the column (",(0,s.jsx)(l.code,{children:'"left"'}),", ",(0,s.jsx)(l.code,{children:'"center"'}),", ",(0,s.jsx)(l.code,{children:'"right"'}),")."]}),"\n",(0,s.jsxs)(l.li,{children:[(0,s.jsx)(l.strong,{children:(0,s.jsx)(l.code,{children:"sort"})}),": Enables sorting for the column. Can be ",(0,s.jsx)(l.code,{children:'"auto"'}),", ",(0,s.jsx)(l.code,{children:'"none"'}),", or a custom comparator."]}),"\n",(0,s.jsxs)(l.li,{children:[(0,s.jsx)(l.strong,{children:(0,s.jsx)(l.code,{children:"sortDirection"})}),": Sets the initial sort direction (",(0,s.jsx)(l.code,{children:'"ascending"'}),", ",(0,s.jsx)(l.code,{children:'"descending"'}),", ",(0,s.jsx)(l.code,{children:'"natural"'}),")."]}),"\n"]}),"\n",(0,s.jsx)(l.h3,{id:"listitem-attributes",children:"Listitem Attributes"}),"\n",(0,s.jsxs)(l.ul,{children:["\n",(0,s.jsxs)(l.li,{children:[(0,s.jsx)(l.strong,{children:(0,s.jsx)(l.code,{children:"value"})}),": Associates a custom object with the ",(0,s.jsx)(l.code,{children:"Listitem"}),". Useful for data binding."]}),"\n",(0,s.jsxs)(l.li,{children:[(0,s.jsx)(l.strong,{children:(0,s.jsx)(l.code,{children:"disabled"})}),": Disables the ",(0,s.jsx)(l.code,{children:"Listitem"})," when set to ",(0,s.jsx)(l.code,{children:"true"}),"."]}),"\n",(0,s.jsxs)(l.li,{children:[(0,s.jsx)(l.strong,{children:(0,s.jsx)(l.code,{children:"selected"})}),": Selects the ",(0,s.jsx)(l.code,{children:"Listitem"})," when set to ",(0,s.jsx)(l.code,{children:"true"}),"."]}),"\n"]}),"\n",(0,s.jsx)(l.h3,{id:"listcell-attributes",children:"Listcell Attributes"}),"\n",(0,s.jsxs)(l.ul,{children:["\n",(0,s.jsxs)(l.li,{children:[(0,s.jsx)(l.strong,{children:(0,s.jsx)(l.code,{children:"label"})}),": Sets the label of the cell."]}),"\n",(0,s.jsxs)(l.li,{children:[(0,s.jsx)(l.strong,{children:(0,s.jsx)(l.code,{children:"colspan"})}),": Merges the cell across multiple columns."]}),"\n",(0,s.jsxs)(l.li,{children:[(0,s.jsx)(l.strong,{children:(0,s.jsx)(l.code,{children:"style"})}),": Applies custom CSS styling to the cell."]}),"\n"]}),"\n",(0,s.jsx)(l.h2,{id:"events-and-listeners",children:"Events and Listeners"}),"\n",(0,s.jsx)(l.h3,{id:"selection-events",children:"Selection Events"}),"\n",(0,s.jsxs)(l.ul,{children:["\n",(0,s.jsxs)(l.li,{children:[(0,s.jsx)(l.strong,{children:(0,s.jsx)(l.code,{children:"onSelect"})}),": Triggered when a user selects an item or multiple items in the ",(0,s.jsx)(l.code,{children:"Listbox"}),". You can capture this event to determine which items were selected."]}),"\n"]}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-xml",children:"<listbox onSelect=\"@command('onSelectEvent')\">\n"})}),"\n",(0,s.jsx)(l.h3,{id:"sorting-events",children:"Sorting Events"}),"\n",(0,s.jsxs)(l.ul,{children:["\n",(0,s.jsxs)(l.li,{children:[(0,s.jsx)(l.strong,{children:(0,s.jsx)(l.code,{children:"onSort"})}),": Triggered when a column header is clicked to sort the data. Sorting can be handled automatically or manually through event listeners."]}),"\n"]}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-xml",children:'<listheader label="Name" sort="auto" onSort="@command(\'onSortEvent\')"/>\n'})}),"\n",(0,s.jsx)(l.h2,{id:"data-binding",children:"Data Binding"}),"\n",(0,s.jsx)(l.h3,{id:"model-binding",children:"Model Binding"}),"\n",(0,s.jsxs)(l.p,{children:["You can bind a ",(0,s.jsx)(l.code,{children:"Listbox"})," to a ",(0,s.jsx)(l.code,{children:"ListModel"}),", which automatically updates the ",(0,s.jsx)(l.code,{children:"Listbox"})," when the underlying data changes."]}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-xml",children:'<listbox model="@load(vm.myListModel)">\r\n    <listhead>\r\n        <listheader label="Item"/>\r\n    </listhead>\r\n</listbox>\n'})}),"\n",(0,s.jsx)(l.h3,{id:"renderer-binding",children:"Renderer Binding"}),"\n",(0,s.jsx)(l.p,{children:"Custom rendering of list items is possible by defining a custom item renderer in Java or through data binding."}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-java",children:"// Java-based renderer\r\nlistbox.setItemRenderer((ListitemRenderer<MyItem>) (listitem, data, index) -> {\r\n    listitem.appendChild(new Listcell(data.getName()));\r\n    listitem.appendChild(new Listcell(data.getValue()));\r\n});\n"})}),"\n",(0,s.jsx)(l.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(l.h3,{id:"basic-listbox",children:"Basic Listbox"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-xml",children:'<listbox rows="5">\r\n    <listhead>\r\n        <listheader label="Column 1"/>\r\n        <listheader label="Column 2"/>\r\n    </listhead>\r\n    <listitem>\r\n        <listcell label="Row 1, Cell 1"/>\r\n        <listcell label="Row 1, Cell 2"/>\r\n    </listitem>\r\n    <listitem>\r\n        <listcell label="Row 2, Cell 1"/>\r\n        <listcell label="Row 2, Cell 2"/>\r\n    </listitem>\r\n</listbox>\n'})}),"\n",(0,s.jsx)(l.h3,{id:"listbox-with-data-binding",children:"Listbox with Data Binding"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-xml",children:'<listbox model="@load(vm.myListModel)">\r\n    <listhead>\r\n        <listheader label="Item Name"/>\r\n        <listheader label="Item Value"/>\r\n    </listhead>\r\n    <template name="model">\r\n        <listitem>\r\n            <listcell label="@load(each.name)"/>\r\n            <listcell label="@load(each.value)"/>\r\n        </listitem>\r\n    </template>\r\n</listbox>\n'})}),"\n",(0,s.jsx)(l.h3,{id:"listbox-with-custom-renderer",children:"Listbox with Custom Renderer"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-java",children:"// In a ViewModel or Controller\r\nListModelList<MyItem> model = new ListModelList<>(getItems());\r\nlistbox.setModel(model);\r\nlistbox.setItemRenderer((ListitemRenderer<MyItem>) (listitem, data, index) -> {\r\n    listitem.appendChild(new Listcell(data.getName()));\r\n    listitem.appendChild(new Listcell(data.getValue()));\r\n});\n"})}),"\n",(0,s.jsx)(l.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(l.ul,{children:["\n",(0,s.jsxs)(l.li,{children:[(0,s.jsx)(l.strong,{children:"Use Data Binding"}),": For large datasets, use ZK\u2019s data binding features (",(0,s.jsx)(l.code,{children:"ListModel"}),", ",(0,s.jsx)(l.code,{children:"ListModelList"}),") to efficiently manage and display data."]}),"\n",(0,s.jsxs)(l.li,{children:[(0,s.jsx)(l.strong,{children:"Optimize Performance"}),": If your ",(0,s.jsx)(l.code,{children:"Listbox"})," contains many items, consider using paging (",(0,s.jsx)(l.code,{children:'mold="paging"'}),") to improve performance."]}),"\n",(0,s.jsxs)(l.li,{children:[(0,s.jsx)(l.strong,{children:"Custom Renderers"}),": Use custom renderers when you need to display complex data or components within ",(0,s.jsx)(l.code,{children:"Listbox"})," cells."]}),"\n",(0,s.jsxs)(l.li,{children:[(0,s.jsx)(l.strong,{children:"Sorting and Filtering"}),": Implement custom sorting and filtering logic if the default behavior does not meet your requirements."]}),"\n"]}),"\n",(0,s.jsx)(l.h1,{id:"customizing",children:"Customizing"}),"\n",(0,s.jsxs)(l.p,{children:["Customizing a ",(0,s.jsx)(l.code,{children:"Listbox"})," in ZK Framework involves various techniques, from styling with CSS to creating custom renderers, handling events, and leveraging data binding. By mastering these customization options, you can create rich, dynamic, and user-friendly data displays that are tailored to the needs of your application."]}),"\n",(0,s.jsxs)(l.p,{children:["Below are several techniques for customizing a ",(0,s.jsx)(l.code,{children:"Listbox"}),", including styling, custom renderers, templates, and event handling."]}),"\n",(0,s.jsx)(l.h2,{id:"1-customizing-appearance-with-css",children:"1. Customizing Appearance with CSS"}),"\n",(0,s.jsxs)(l.p,{children:["You can customize the appearance of a ",(0,s.jsx)(l.code,{children:"Listbox"})," using CSS. ZK provides CSS classes for ",(0,s.jsx)(l.code,{children:"Listbox"}),", ",(0,s.jsx)(l.code,{children:"Listheader"}),", ",(0,s.jsx)(l.code,{children:"Listitem"}),", and ",(0,s.jsx)(l.code,{children:"Listcell"}),", which you can override or extend."]}),"\n",(0,s.jsx)(l.h3,{id:"example",children:"Example"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-css",children:".z-listbox {\r\n    border: 1px solid #ddd;\r\n    background-color: #f9f9f9;\r\n}\r\n\r\n.z-listbox-header {\r\n    background-color: #007bff;\r\n    color: white;\r\n    font-weight: bold;\r\n}\r\n\r\n.z-listbox-item {\r\n    border-bottom: 1px solid #ddd;\r\n}\r\n\r\n.z-listbox-cell {\r\n    padding: 10px;\r\n    font-family: Arial, sans-serif;\r\n}\n"})}),"\n",(0,s.jsx)(l.p,{children:"In your ZUL file, these styles will automatically apply:"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-xml",children:'<listbox>\r\n    <listhead>\r\n        <listheader label="Name"/>\r\n        <listheader label="Age"/>\r\n    </listhead>\r\n    <listitem>\r\n        <listcell label="John Doe"/>\r\n        <listcell label="28"/>\r\n    </listitem>\r\n    <listitem>\r\n        <listcell label="Jane Smith"/>\r\n        <listcell label="34"/>\r\n    </listitem>\r\n</listbox>\n'})}),"\n",(0,s.jsx)(l.h3,{id:"adding-inline-styles",children:"Adding Inline Styles"}),"\n",(0,s.jsxs)(l.p,{children:["You can also apply inline styles directly to ",(0,s.jsx)(l.code,{children:"Listbox"}),", ",(0,s.jsx)(l.code,{children:"Listheader"}),", ",(0,s.jsx)(l.code,{children:"Listitem"}),", or ",(0,s.jsx)(l.code,{children:"Listcell"})," components."]}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-xml",children:'<listbox style="border: 2px solid #000; background-color: #eee;">\r\n    <listhead>\r\n        <listheader label="Name" style="background-color: #007bff; color: white;"/>\r\n        <listheader label="Age" style="background-color: #007bff; color: white;"/>\r\n    </listhead>\r\n    <listitem>\r\n        <listcell label="John Doe" style="padding: 10px;"/>\r\n        <listcell label="28" style="padding: 10px;"/>\r\n    </listitem>\r\n</listbox>\n'})}),"\n",(0,s.jsx)(l.h2,{id:"2-customizing-content-with-templates",children:"2. Customizing Content with Templates"}),"\n",(0,s.jsxs)(l.p,{children:["ZK allows you to customize the content of each ",(0,s.jsx)(l.code,{children:"Listitem"})," using templates. This is especially useful when displaying complex data or using custom components within the cells."]}),"\n",(0,s.jsx)(l.h3,{id:"example-1",children:"Example"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-xml",children:'<listbox model="@load(vm.people)">\r\n    <listhead>\r\n        <listheader label="Name"/>\r\n        <listheader label="Details"/>\r\n    </listhead>\r\n    <template name="model">\r\n        <listitem>\r\n            <listcell label="@load(each.name)"/>\r\n            <listcell>\r\n                <vbox>\r\n                    <label value="Age: @load(each.age)"/>\r\n                    <label value="Email: @load(each.email)"/>\r\n                </vbox>\r\n            </listcell>\r\n        </listitem>\r\n    </template>\r\n</listbox>\n'})}),"\n",(0,s.jsxs)(l.p,{children:["In this example, each ",(0,s.jsx)(l.code,{children:"Listitem"})," uses a custom template that combines labels in a ",(0,s.jsx)(l.code,{children:"vbox"})," layout to display additional details."]}),"\n",(0,s.jsx)(l.h2,{id:"3-using-a-custom-renderer",children:"3. Using a Custom Renderer"}),"\n",(0,s.jsxs)(l.p,{children:["When you need more control over how the data is presented, you can use a custom renderer. The ",(0,s.jsx)(l.code,{children:"ListitemRenderer"})," interface allows you to define exactly how each ",(0,s.jsx)(l.code,{children:"Listitem"})," and its ",(0,s.jsx)(l.code,{children:"Listcells"})," are created."]}),"\n",(0,s.jsx)(l.h3,{id:"example-2",children:"Example"}),"\n",(0,s.jsx)(l.h4,{id:"java-implementation",children:"Java Implementation"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-java",children:'listbox.setItemRenderer(new ListitemRenderer<Person>() {\r\n    @Override\r\n    public void render(Listitem listitem, Person person, int index) throws Exception {\r\n        Listcell nameCell = new Listcell(person.getName());\r\n        Listcell ageCell = new Listcell(String.valueOf(person.getAge()));\r\n        \r\n        if (person.getAge() > 30) {\r\n            nameCell.setStyle("color: red;");\r\n        }\r\n\r\n        listitem.appendChild(nameCell);\r\n        listitem.appendChild(ageCell);\r\n    }\r\n});\n'})}),"\n",(0,s.jsx)(l.h4,{id:"zul-implementation-with-binding",children:"ZUL Implementation with Binding"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-xml",children:'<listbox model="@load(vm.people)">\r\n    <listhead>\r\n        <listheader label="Name"/>\r\n        <listheader label="Age"/>\r\n    </listhead>\r\n    <template name="model">\r\n        <listitem self="@renderer(vm.renderItem)">\r\n            <listcell>\r\n                <label value="@load(each.name)" style="@load(vm.getStyle(each.age))"/>\r\n            </listcell>\r\n            <listcell label="@load(each.age)"/>\r\n        </listitem>\r\n    </template>\r\n</listbox>\n'})}),"\n",(0,s.jsxs)(l.p,{children:["In this example, the ",(0,s.jsx)(l.code,{children:"getStyle"})," method in the ViewModel returns different styles based on the person's age."]}),"\n",(0,s.jsx)(l.h2,{id:"4-customizing-behavior-with-events",children:"4. Customizing Behavior with Events"}),"\n",(0,s.jsxs)(l.p,{children:["You can customize the behavior of ",(0,s.jsx)(l.code,{children:"Listbox"})," by handling events such as ",(0,s.jsx)(l.code,{children:"onSelect"}),", ",(0,s.jsx)(l.code,{children:"onCheck"}),", and ",(0,s.jsx)(l.code,{children:"onSort"}),"."]}),"\n",(0,s.jsx)(l.h3,{id:"example-3",children:"Example"}),"\n",(0,s.jsx)(l.h4,{id:"handling-selection-event",children:"Handling Selection Event"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-xml",children:'<listbox onSelect="@command(\'handleSelection\')" model="@load(vm.people)">\r\n    <listhead>\r\n        <listheader label="Name"/>\r\n        <listheader label="Age"/>\r\n    </listhead>\r\n</listbox>\n'})}),"\n",(0,s.jsx)(l.h4,{id:"in-the-viewmodel",children:"In the ViewModel"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-java",children:'@Command\r\n@NotifyChange("selectedPerson")\r\npublic void handleSelection(@BindingParam("event") SelectEvent<Listitem, Person> event) {\r\n    selectedPerson = event.getSelectedItems().iterator().next().getValue();\r\n}\n'})}),"\n",(0,s.jsx)(l.h3,{id:"example-4",children:"Example"}),"\n",(0,s.jsx)(l.h4,{id:"handling-sorting-event",children:"Handling Sorting Event"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-xml",children:'<listbox model="@load(vm.people)">\r\n    <listhead>\r\n        <listheader label="Name" sort="auto(@command(\'sort\', column=\'name\'))"/>\r\n        <listheader label="Age" sort="auto(@command(\'sort\', column=\'age\'))"/>\r\n    </listhead>\r\n</listbox>\n'})}),"\n",(0,s.jsx)(l.h4,{id:"in-the-viewmodel-1",children:"In the ViewModel"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-java",children:'@Command\r\n@NotifyChange("people")\r\npublic void sort(@BindingParam("column") String column) {\r\n    Collections.sort(people, (p1, p2) -> {\r\n        if (column.equals("name")) {\r\n            return p1.getName().compareTo(p2.getName());\r\n        } else if (column.equals("age")) {\r\n            return Integer.compare(p1.getAge(), p2.getAge());\r\n        }\r\n        return 0;\r\n    });\r\n}\n'})}),"\n",(0,s.jsx)(l.h2,{id:"5-customizing-pagination",children:"5. Customizing Pagination"}),"\n",(0,s.jsxs)(l.p,{children:["When dealing with large datasets, it\u2019s often necessary to paginate the ",(0,s.jsx)(l.code,{children:"Listbox"}),". ZK provides built-in pagination support using the ",(0,s.jsx)(l.code,{children:'mold="paging"'})," attribute."]}),"\n",(0,s.jsx)(l.h3,{id:"example-5",children:"Example"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-xml",children:'<listbox mold="paging" pageSize="10" model="@load(vm.people)">\r\n    <listhead>\r\n        <listheader label="Name"/>\r\n        <listheader label="Age"/>\r\n    </listhead>\r\n</listbox>\n'})}),"\n",(0,s.jsx)(l.h3,{id:"customizing-the-paging-component",children:"Customizing the Paging Component"}),"\n",(0,s.jsxs)(l.p,{children:["You can customize the paging component by styling or by using a custom ",(0,s.jsx)(l.code,{children:"Paging"})," component."]}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-xml",children:'<listbox mold="paging" pageSize="10" model="@load(vm.people)">\r\n    <listhead>\r\n        <listheader label="Name"/>\r\n        <listheader label="Age"/>\r\n    </listhead>\r\n    <paging mold="os" totalSize="@load(vm.totalSize)"/>\r\n</listbox>\n'})}),"\n",(0,s.jsx)(l.h2,{id:"6-adding-checkboxes-or-radio-buttons",children:"6. Adding Checkboxes or Radio Buttons"}),"\n",(0,s.jsxs)(l.p,{children:["If you want to allow users to select multiple items with checkboxes or radio buttons, you can customize the ",(0,s.jsx)(l.code,{children:"Listbox"})," with the ",(0,s.jsx)(l.code,{children:"checkmark"})," or ",(0,s.jsx)(l.code,{children:"radio"})," attribute."]}),"\n",(0,s.jsx)(l.h3,{id:"example-6",children:"Example"}),"\n",(0,s.jsx)(l.h4,{id:"using-checkboxes",children:"Using Checkboxes"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-xml",children:'<listbox checkmark="true" model="@load(vm.people)">\r\n    <listhead>\r\n        <listheader label="Select"/>\r\n        <listheader label="Name"/>\r\n        <listheader label="Age"/>\r\n    </listhead>\r\n</listbox>\n'})}),"\n",(0,s.jsx)(l.h4,{id:"using-radio-buttons",children:"Using Radio Buttons"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-xml",children:'<listbox multiple="false" model="@load(vm.people)">\r\n    <listhead>\r\n        <listheader label="Select"/>\r\n        <listheader label="Name"/>\r\n        <listheader label="Age"/>\r\n    </listhead>\r\n    <listitem>\r\n        <listcell>\r\n            <radio/>\r\n        </listcell>\r\n        <listcell label="@load(each.name)"/>\r\n        <listcell label="@load(each.age)"/>\r\n    </listitem>\r\n</listbox>\n'})}),"\n",(0,s.jsx)(l.h2,{id:"7-customizing-selection-mode",children:"7. Customizing Selection Mode"}),"\n",(0,s.jsxs)(l.p,{children:["By default, ",(0,s.jsx)(l.code,{children:"Listbox"})," supports single or multiple selection modes. You can control this using the ",(0,s.jsx)(l.code,{children:"multiple"})," attribute."]}),"\n",(0,s.jsx)(l.h3,{id:"single-selection",children:"Single Selection"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-xml",children:'<listbox multiple="false" model="@load(vm.people)">\r\n    \x3c!-- ... --\x3e\r\n</listbox>\n'})}),"\n",(0,s.jsx)(l.h3,{id:"multiple-selection",children:"Multiple Selection"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-xml",children:'<listbox multiple="true" model="@load(vm.people)">\r\n    \x3c!-- ... --\x3e\r\n</listbox>\n'})}),"\n",(0,s.jsx)(l.h2,{id:"8-using-different-molds",children:"8. Using Different Molds"}),"\n",(0,s.jsxs)(l.p,{children:["ZK supports different rendering molds that change the appearance and behavior of the ",(0,s.jsx)(l.code,{children:"Listbox"}),". The ",(0,s.jsx)(l.code,{children:"paging"})," mold, for instance, allows pagination, while the default mold presents the items in a scrollable list."]}),"\n",(0,s.jsx)(l.h3,{id:"example-7",children:"Example"}),"\n",(0,s.jsx)(l.h4,{id:"default-mold",children:"Default Mold"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-xml",children:'<listbox model="@load(vm.people)">\r\n    \x3c!-- ... --\x3e\r\n</listbox>\n'})}),"\n",(0,s.jsx)(l.h4,{id:"paging-mold",children:"Paging Mold"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-xml",children:'<listbox mold="paging" pageSize="10" model="@load(vm.people)">\r\n    \x3c!-- ... --\x3e\r\n</listbox>\n'})})]})}function h(e={}){const{wrapper:l}={...(0,t.R)(),...e.components};return l?(0,s.jsx)(l,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,l,n)=>{n.d(l,{R:()=>r,x:()=>d});var i=n(6540);const s={},t=i.createContext(s);function r(e){const l=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(l):{...l,...e}}),[l,e])}function d(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(t.Provider,{value:l},e.children)}}}]);