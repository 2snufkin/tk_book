"use strict";(self.webpackChunktkbook=self.webpackChunktkbook||[]).push([[1705],{4699:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"Best Practice","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Best Practices in Java Development","href":"/tk_book/Best Practice/Best Practices In Java Development","docId":"Best Practice/Best Practices In Java Development","unlisted":false},{"type":"link","label":"Collaboration Best Practices","href":"/tk_book/Best Practice/Collaboration Best Practices","docId":"Best Practice/Collaboration Best Practices","unlisted":false},{"type":"link","label":"Developer\'s Best Practices","href":"/tk_book/Best Practice/Developer\'S Best Practices","docId":"Best Practice/Developer\'S Best Practices","unlisted":false},{"type":"link","label":"GitHub Workflow","href":"/tk_book/Best Practice/GitHub Workflow","docId":"Best Practice/GitHub Workflow","unlisted":false}]},{"type":"category","label":"Errors","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Entities","href":"/tk_book/Errors/Accessing Inaccessible Attribute","docId":"Errors/Accessing Inaccessible Attribute","unlisted":false},{"type":"link","label":"CannotCreateTransaction","href":"/tk_book/Errors/Cannotcreatetransaction","docId":"Errors/Cannotcreatetransaction","unlisted":false},{"type":"link","label":"Liquibase Checksum Validation Issue","href":"/tk_book/Errors/Liquibase Checksum Validation Issue","docId":"Errors/Liquibase Checksum Validation Issue","unlisted":false},{"type":"link","label":"\\"Problem In Line\\" Error","href":"/tk_book/Errors/ZK Exceptions","docId":"Errors/ZK Exceptions","unlisted":false}]},{"type":"category","label":"Java & Spring","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Comparing Objects in Java","href":"/tk_book/Java & Spring/Comparing Objects","docId":"Java & Spring/Comparing Objects","unlisted":false},{"type":"link","label":"Repository, Manager, and Test","href":"/tk_book/Java & Spring/Creating new Entity","docId":"Java & Spring/Creating new Entity","unlisted":false},{"type":"link","label":"DAO Implementation Guide","href":"/tk_book/Java & Spring/DAO Implementation","docId":"Java & Spring/DAO Implementation","unlisted":false},{"type":"link","label":"Entites","href":"/tk_book/Java & Spring/Entites","docId":"Java & Spring/Entites","unlisted":false},{"type":"link","label":"HQL or JPQL?","href":"/tk_book/Java & Spring/HQL vs JPQL","docId":"Java & Spring/HQL vs JPQL","unlisted":false},{"type":"link","label":"Java Modifiers Order","href":"/tk_book/Java & Spring/Java Modifiers Order","docId":"Java & Spring/Java Modifiers Order","unlisted":false},{"type":"link","label":"Named Parameters vs. Positional Parameters in JPA/Hibernate","href":"/tk_book/Java & Spring/Named Parameters vs. Positional Parameters","docId":"Java & Spring/Named Parameters vs. Positional Parameters","unlisted":false},{"type":"link","label":"Resource Bundles in Java","href":"/tk_book/Java & Spring/ResourceBundle","docId":"Java & Spring/ResourceBundle","unlisted":false},{"type":"link","label":"SQL Stored Procedures","href":"/tk_book/Java & Spring/SQL Stored Procedures","docId":"Java & Spring/SQL Stored Procedures","unlisted":false}]},{"type":"category","label":"Libraries","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Apache POI Performance Optimization Guide: Choosing the Right Components","href":"/tk_book/Libraries/Apache Poi - Performance","docId":"Libraries/Apache Poi - Performance","unlisted":false},{"type":"link","label":"Apache Poi","href":"/tk_book/Libraries/Apache Poi","docId":"Libraries/Apache Poi","unlisted":false},{"type":"link","label":"Liquibase In TK","href":"/tk_book/Libraries/Liquibase In TK","docId":"Libraries/Liquibase In TK","unlisted":false},{"type":"link","label":"Liquibase","href":"/tk_book/Libraries/Liquibase","docId":"Libraries/Liquibase","unlisted":false}]},{"type":"category","label":"Security","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Dependency Management in Java Projects","href":"/tk_book/Security/Dependencies","docId":"Security/Dependencies","unlisted":false},{"type":"link","label":"SQL Injection Overview","href":"/tk_book/Security/Sql Injection","docId":"Security/Sql Injection","unlisted":false}]},{"type":"category","label":"Tumorotek","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"General","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Code Formatting Standards in Tumorotek","href":"/tk_book/Tumorotek/General/Code Formatting","docId":"Tumorotek/General/Code Formatting","unlisted":false},{"type":"link","label":"Development Environment Setup Guide","href":"/tk_book/Tumorotek/General/Development Environment Setup","docId":"Tumorotek/General/Development Environment Setup","unlisted":false},{"type":"link","label":"Genericdaojpa","href":"/tk_book/Tumorotek/General/Genericdaojpa","docId":"Tumorotek/General/Genericdaojpa","unlisted":false},{"type":"link","label":"Naming Conventions","href":"/tk_book/Tumorotek/General/Naming Conventions","docId":"Tumorotek/General/Naming Conventions","unlisted":false}]},{"type":"category","label":"How To","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"PDF Generation Guide for Tumorotek","href":"/tk_book/Tumorotek/How To/PDF Generation","docId":"Tumorotek/How To/PDF Generation","unlisted":false},{"type":"link","label":"Unit Tests","href":"/tk_book/Tumorotek/How To/Unit Tests","docId":"Tumorotek/How To/Unit Tests","unlisted":false},{"type":"link","label":"User Rights","href":"/tk_book/Tumorotek/How To/User Rights","docId":"Tumorotek/How To/User Rights","unlisted":false}]},{"type":"category","label":"Packages","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"core","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"ConfigManager","href":"/tk_book/Tumorotek/Packages/core/ConfigManager","docId":"Tumorotek/Packages/core/ConfigManager","unlisted":false},{"type":"link","label":"ConteneurManager","href":"/tk_book/Tumorotek/Packages/core/ConteneurManager","docId":"Tumorotek/Packages/core/ConteneurManager","unlisted":false},{"type":"link","label":"EnceinteManager","href":"/tk_book/Tumorotek/Packages/core/EncienteManager","docId":"Tumorotek/Packages/core/EncienteManager","unlisted":false},{"type":"link","label":"XmlUtils","href":"/tk_book/Tumorotek/Packages/core/XmlUtils","docId":"Tumorotek/Packages/core/XmlUtils","unlisted":false}]},{"type":"category","label":"webapp","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"AbstractListeController2","href":"/tk_book/Tumorotek/Packages/webapp/AbstractListeController2","docId":"Tumorotek/Packages/webapp/AbstractListeController2","unlisted":false},{"type":"link","label":"FicheConteneur","href":"/tk_book/Tumorotek/Packages/webapp/FicheConteneur","docId":"Tumorotek/Packages/webapp/FicheConteneur","unlisted":false},{"type":"link","label":"FicheDeplacerEmplacements","href":"/tk_book/Tumorotek/Packages/webapp/FicheDeplacerEmplacements","docId":"Tumorotek/Packages/webapp/FicheDeplacerEmplacements","unlisted":false},{"type":"link","label":"FicheImportTemplate","href":"/tk_book/Tumorotek/Packages/webapp/FicheImportTemplate","docId":"Tumorotek/Packages/webapp/FicheImportTemplate","unlisted":false},{"type":"link","label":"FichePrelevementStatic","href":"/tk_book/Tumorotek/Packages/webapp/FichePrelevementStatic","docId":"Tumorotek/Packages/webapp/FichePrelevementStatic","unlisted":false},{"type":"link","label":"ListeEchantillon extends AbstractListeController2","href":"/tk_book/Tumorotek/Packages/webapp/ListeEchantillon","docId":"Tumorotek/Packages/webapp/ListeEchantillon","unlisted":false},{"type":"link","label":"ListeStockages","href":"/tk_book/Tumorotek/Packages/webapp/ListeStockages","docId":"Tumorotek/Packages/webapp/ListeStockages","unlisted":false},{"type":"link","label":"ProdDeriveRowRenderer","href":"/tk_book/Tumorotek/Packages/webapp/ProdDeriveRowRenderer","docId":"Tumorotek/Packages/webapp/ProdDeriveRowRenderer","unlisted":false}]}],"href":"/tk_book/Tumorotek/Packages/"}]},{"type":"category","label":"ZK","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Controller Annotations","href":"/tk_book/ZK/Annotations","docId":"ZK/Annotations","unlisted":false},{"type":"link","label":"Buttons","href":"/tk_book/ZK/Buttons","docId":"ZK/Buttons","unlisted":false},{"type":"link","label":"Communication Between Components in ZK Framework","href":"/tk_book/ZK/Communication Between Components","docId":"ZK/Communication Between Components","unlisted":false},{"type":"link","label":"Understanding Data Binding in MVC vs. MVVM with ZK Wire Component","href":"/tk_book/ZK/Data Binding","docId":"ZK/Data Binding","unlisted":false},{"type":"link","label":"ZK Framework: Event Handling and Operations","href":"/tk_book/ZK/Event Handling And Operations","docId":"ZK/Event Handling And Operations","unlisted":false},{"type":"link","label":"Event Handling","href":"/tk_book/ZK/Event Handling","docId":"ZK/Event Handling","unlisted":false},{"type":"link","label":"Annotations","href":"/tk_book/ZK/Generic Forward Composer","docId":"ZK/Generic Forward Composer","unlisted":false},{"type":"link","label":"Grid","href":"/tk_book/ZK/Grid","docId":"ZK/Grid","unlisted":false},{"type":"link","label":"ZK Framework: Listbox Component Manual","href":"/tk_book/ZK/Listbox","docId":"ZK/Listbox","unlisted":false},{"type":"link","label":"MVC vs MVVM","href":"/tk_book/ZK/Mvc Vs Mvvm","docId":"ZK/Mvc Vs Mvvm","unlisted":false},{"type":"link","label":"ZK Framework Navigation Guide","href":"/tk_book/ZK/Navigation Guide","docId":"ZK/Navigation Guide","unlisted":false},{"type":"link","label":"Opening and Handling Modals","href":"/tk_book/ZK/Opening And Handling Modals","docId":"ZK/Opening And Handling Modals","unlisted":false},{"type":"link","label":"Reusable Components","href":"/tk_book/ZK/Reusable Components","docId":"ZK/Reusable Components","unlisted":false},{"type":"link","label":"UI Refresh in ZK Framework: MVC vs MVVM","href":"/tk_book/ZK/Ui Update","docId":"ZK/Ui Update","unlisted":false},{"type":"link","label":"ZUL Page Lifecycle","href":"/tk_book/ZK/ZUL Page Lifecycle","docId":"ZK/ZUL Page Lifecycle","unlisted":false},{"type":"link","label":"Zul File","href":"/tk_book/ZK/Zul file","docId":"ZK/Zul file","unlisted":false}]},{"type":"link","label":"Introduction","href":"/tk_book/","docId":"intro","unlisted":false}]},"docs":{"Best Practice/Best Practices In Java Development":{"id":"Best Practice/Best Practices In Java Development","title":"Best Practices in Java Development","description":"Project Setup and Dependency Management","sidebar":"tutorialSidebar"},"Best Practice/Collaboration Best Practices":{"id":"Best Practice/Collaboration Best Practices","title":"Collaboration Best Practices","description":"Communication & Transparency","sidebar":"tutorialSidebar"},"Best Practice/Developer\'S Best Practices":{"id":"Best Practice/Developer\'S Best Practices","title":"Developer\'s Best Practices","description":"These principles aim to enhance code quality, reduce complexity, and facilitate collaboration among developers.","sidebar":"tutorialSidebar"},"Best Practice/GitHub Workflow":{"id":"Best Practice/GitHub Workflow","title":"GitHub Workflow","description":"GitHub Workflow","sidebar":"tutorialSidebar"},"Errors/Accessing Inaccessible Attribute":{"id":"Errors/Accessing Inaccessible Attribute","title":"Entities","description":"Accessing Inaccessible Attribute","sidebar":"tutorialSidebar"},"Errors/Cannotcreatetransaction":{"id":"Errors/Cannotcreatetransaction","title":"CannotCreateTransaction","description":"transaction_problem","sidebar":"tutorialSidebar"},"Errors/Liquibase Checksum Validation Issue":{"id":"Errors/Liquibase Checksum Validation Issue","title":"Liquibase Checksum Validation Issue","description":"Checksum validation issues in Liquibase can be resolved by updating the checksums in the DATABASECHANGELOG table to match the modified changesets. This document outlines common causes, solutions, and best practices for handling these issues.","sidebar":"tutorialSidebar"},"Errors/ZK Exceptions":{"id":"Errors/ZK Exceptions","title":"\\"Problem In Line\\" Error","description":"Overview","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Introduction","description":"Welcome to the Tumorotek Project Documentation Hub. This resource has been thoughtfully structured to support both developers, managers and non-developers in understanding and contributing to the Tumorotek project more effectively. I\u2019ve organized the content into six main sections to cover essential aspects of development, best practices, and security, each aimed at helping you navigate the project with ease.","sidebar":"tutorialSidebar"},"Java & Spring/Comparing Objects":{"id":"Java & Spring/Comparing Objects","title":"Comparing Objects in Java","description":"Comparing Primitive Types, Java Objects, and Custom Objects in Java: Best Practices","sidebar":"tutorialSidebar"},"Java & Spring/Creating new Entity":{"id":"Java & Spring/Creating new Entity","title":"Repository, Manager, and Test","description":"When working with an older Spring project that doesn\'t use the annotation-based configuration typical in Spring Boot, you would need to configure your DAO, Entity, and Service in XML files.","sidebar":"tutorialSidebar"},"Java & Spring/DAO Implementation":{"id":"Java & Spring/DAO Implementation","title":"DAO Implementation Guide","description":"This tutorial will guide you through creating and working with Data Access Objects (DAOs) in the Tumorotek application.","sidebar":"tutorialSidebar"},"Java & Spring/Entites":{"id":"Java & Spring/Entites","title":"Entites","description":"Entities in a Spring project represent the business objects or data structures that are persisted to a database.","sidebar":"tutorialSidebar"},"Java & Spring/HQL vs JPQL":{"id":"Java & Spring/HQL vs JPQL","title":"HQL or JPQL?","description":"In the Tumorotek project, we use JPQL rather than HQL. But what exactly is the difference between them, and how can we distinguish between the two?","sidebar":"tutorialSidebar"},"Java & Spring/Java Modifiers Order":{"id":"Java & Spring/Java Modifiers Order","title":"Java Modifiers Order","description":"In Java, modifiers follow a specific conventional order that enhances code readability and maintainability. This guide outlines the standard order of modifiers for different Java elements.","sidebar":"tutorialSidebar"},"Java & Spring/Named Parameters vs. Positional Parameters":{"id":"Java & Spring/Named Parameters vs. Positional Parameters","title":"Named Parameters vs. Positional Parameters in JPA/Hibernate","description":"When working with JPA/Hibernate, you have two primary ways to define and use parameters in your JPQL (Java Persistence Query Language) queries: Named Parameters and Positional Parameters. Understanding the differences and best practices for each approach is crucial for writing maintainable and secure database queries.","sidebar":"tutorialSidebar"},"Java & Spring/ResourceBundle":{"id":"Java & Spring/ResourceBundle","title":"Resource Bundles in Java","description":"Resource bundles in Java provide a robust mechanism for internationalizing applications by managing locale-specific resources. They enable seamless localization while keeping the core application code independent of locale-specific details.","sidebar":"tutorialSidebar"},"Java & Spring/SQL Stored Procedures":{"id":"Java & Spring/SQL Stored Procedures","title":"SQL Stored Procedures","description":"SQL Stored Procedures: A Guide for Java + Spring + Liquibase Projects","sidebar":"tutorialSidebar"},"Libraries/Apache Poi":{"id":"Libraries/Apache Poi","title":"Apache Poi","description":"Apache POI User Guide Manual","sidebar":"tutorialSidebar"},"Libraries/Apache Poi - Performance":{"id":"Libraries/Apache Poi - Performance","title":"Apache POI Performance Optimization Guide: Choosing the Right Components","description":"When generating Excel files in Java, especially with large datasets, selecting the appropriate components significantly impacts performance and memory usage. This guide explores key considerations for choosing between different implementations of ByteArrayOutputStream and Workbook classes.","sidebar":"tutorialSidebar"},"Libraries/Liquibase":{"id":"Libraries/Liquibase","title":"Liquibase","description":"Liquibase is an open-source library for managing and applying database schema changes across environments in a systematic and version-controlled manner. It supports various formats (XML, YAML, JSON, SQL) for defining changes and ensures reliable deployments with rollback and audit capabilities.","sidebar":"tutorialSidebar"},"Libraries/Liquibase In TK":{"id":"Libraries/Liquibase In TK","title":"Liquibase In TK","description":"After analyzing the provided information, I\'ll explain the current Liquibase setup in your Tumorotek application and suggest improvements.","sidebar":"tutorialSidebar"},"Security/Dependencies":{"id":"Security/Dependencies","title":"Dependency Management in Java Projects","description":"Background","sidebar":"tutorialSidebar"},"Security/Sql Injection":{"id":"Security/Sql Injection","title":"SQL Injection Overview","description":"SQL injection (SQLi) is a critical security vulnerability that occurs when an application fails to properly validate or sanitize user input before using it in SQL queries. This attack vector allows malicious actors to manipulate or bypass application logic, potentially leading to:","sidebar":"tutorialSidebar"},"Tumorotek/General/Code Formatting":{"id":"Tumorotek/General/Code Formatting","title":"Code Formatting Standards in Tumorotek","description":"In the Tumorotek project, consistent code formatting across all developers is considered essential for maintaining code quality and team efficiency. To enforce this consistency, the team has implemented several measures:","sidebar":"tutorialSidebar"},"Tumorotek/General/Development Environment Setup":{"id":"Tumorotek/General/Development Environment Setup","title":"Development Environment Setup Guide","description":"Overview","sidebar":"tutorialSidebar"},"Tumorotek/General/Genericdaojpa":{"id":"Tumorotek/General/Genericdaojpa","title":"Genericdaojpa","description":"All or most of the DAO interfaces in Tumorotek extends GenericDaoJpa.","sidebar":"tutorialSidebar"},"Tumorotek/General/Naming Conventions":{"id":"Tumorotek/General/Naming Conventions","title":"Naming Conventions","description":"Naming Conventions","sidebar":"tutorialSidebar"},"Tumorotek/How To/PDF Generation":{"id":"Tumorotek/How To/PDF Generation","title":"PDF Generation Guide for Tumorotek","description":"This guide explains how to generate and download PDF documents in Tumorotek using ZK Framework.","sidebar":"tutorialSidebar"},"Tumorotek/How To/Unit Tests":{"id":"Tumorotek/How To/Unit Tests","title":"Unit Tests","description":"When working on the Tumorotek project, it is essential to write unit tests for your Data Access Object (DAO) classes and Services (Managers). This guide covers both DAO and Manager testing approaches.","sidebar":"tutorialSidebar"},"Tumorotek/How To/User Rights":{"id":"Tumorotek/How To/User Rights","title":"User Rights","description":"This document provides guidelines on how to conditionally perform actions based on user rights within the system.","sidebar":"tutorialSidebar"},"Tumorotek/Packages/core/ConfigManager":{"id":"Tumorotek/Packages/core/ConfigManager","title":"ConfigManager","description":"Overview","sidebar":"tutorialSidebar"},"Tumorotek/Packages/core/ConteneurManager":{"id":"Tumorotek/Packages/core/ConteneurManager","title":"ConteneurManager","description":"- `java","sidebar":"tutorialSidebar"},"Tumorotek/Packages/core/EncienteManager":{"id":"Tumorotek/Packages/core/EncienteManager","title":"EnceinteManager","description":"- findByIdManager: Retrieves an Enceinte object by its ID.","sidebar":"tutorialSidebar"},"Tumorotek/Packages/core/XmlUtils":{"id":"Tumorotek/Packages/core/XmlUtils","title":"XmlUtils","description":"Description","sidebar":"tutorialSidebar"},"Tumorotek/Packages/Packages":{"id":"Tumorotek/Packages/Packages","title":"Packages","description":"Overview","sidebar":"tutorialSidebar"},"Tumorotek/Packages/webapp/AbstractListeController2":{"id":"Tumorotek/Packages/webapp/AbstractListeController2","title":"AbstractListeController2","description":"Description","sidebar":"tutorialSidebar"},"Tumorotek/Packages/webapp/FicheConteneur":{"id":"Tumorotek/Packages/webapp/FicheConteneur","title":"FicheConteneur","description":"Description","sidebar":"tutorialSidebar"},"Tumorotek/Packages/webapp/FicheDeplacerEmplacements":{"id":"Tumorotek/Packages/webapp/FicheDeplacerEmplacements","title":"FicheDeplacerEmplacements","description":"This class manages the movement and storage operations of biological samples within the storage system. It provides a comprehensive interface for:","sidebar":"tutorialSidebar"},"Tumorotek/Packages/webapp/FicheImportTemplate":{"id":"Tumorotek/Packages/webapp/FicheImportTemplate","title":"FicheImportTemplate","description":"This class manages the import template functionality in the application. It handles the creation, editing, and management of import templates that define how external data should be imported into the system. It provides features for:","sidebar":"tutorialSidebar"},"Tumorotek/Packages/webapp/FichePrelevementStatic":{"id":"Tumorotek/Packages/webapp/FichePrelevementStatic","title":"FichePrelevementStatic","description":"Sure, here\'s the JavaDoc documentation for the given class in Markdown format:","sidebar":"tutorialSidebar"},"Tumorotek/Packages/webapp/ListeEchantillon":{"id":"Tumorotek/Packages/webapp/ListeEchantillon","title":"ListeEchantillon extends AbstractListeController2","description":"Description","sidebar":"tutorialSidebar"},"Tumorotek/Packages/webapp/ListeStockages":{"id":"Tumorotek/Packages/webapp/ListeStockages","title":"ListeStockages","description":"This class manages the display and interaction with a hierarchical storage system, handling containers (Conteneurs), enclosures (Enceintes), and terminals (Terminales). It provides functionality for viewing, selecting, moving, and managing these storage elements through a tree-based interface.","sidebar":"tutorialSidebar"},"Tumorotek/Packages/webapp/ProdDeriveRowRenderer":{"id":"Tumorotek/Packages/webapp/ProdDeriveRowRenderer","title":"ProdDeriveRowRenderer","description":"Constructor","sidebar":"tutorialSidebar"},"ZK/Annotations":{"id":"ZK/Annotations","title":"Controller Annotations","description":"The package an annotation comes from helps determine its primary use case within the ZK framework.","sidebar":"tutorialSidebar"},"ZK/Buttons":{"id":"ZK/Buttons","title":"Buttons","description":"Buttons are a fundamental UI component in ZK applications, allowing users to trigger actions and interact with the system. This document covers the attributes of the button component in ZK and how to handle button events in both MVC (Model-View-Controller) and MVVM (Model-View-ViewModel) patterns.","sidebar":"tutorialSidebar"},"ZK/Communication Between Components":{"id":"ZK/Communication Between Components","title":"Communication Between Components in ZK Framework","description":"// to do: edit it","sidebar":"tutorialSidebar"},"ZK/Data Binding":{"id":"ZK/Data Binding","title":"Understanding Data Binding in MVC vs. MVVM with ZK Wire Component","description":"Overview","sidebar":"tutorialSidebar"},"ZK/Event Handling":{"id":"ZK/Event Handling","title":"Event Handling","description":"In ZK Framework, events play a crucial role in capturing user interactions and triggering corresponding actions. This guide provides an overview of handling events in ZK, emphasizing the general principles applicable to various scenarios.","sidebar":"tutorialSidebar"},"ZK/Event Handling And Operations":{"id":"ZK/Event Handling And Operations","title":"ZK Framework: Event Handling and Operations","description":"The ZK Framework, a popular Java-based framework for building rich web applications, provides extensive support for event handling and managing operations. Understanding how to effectively utilize ZK\'s event handling mechanisms, including manual event firing, synchronized long operations, asynchronous operations, and the event queue, is crucial for developing responsive and efficient applications. This document will provide an overview of these concepts and their implementation within the ZK framework.","sidebar":"tutorialSidebar"},"ZK/Generic Forward Composer":{"id":"ZK/Generic Forward Composer","title":"Annotations","description":"Controller","sidebar":"tutorialSidebar"},"ZK/Grid":{"id":"ZK/Grid","title":"Grid","description":"Grids in ZK are powerful components for displaying organized data. This guide will walk you through how to work with a Grid, separate data into pages, and implement sorting. We will also explore accessing controller variables in the view and using the master-detail feature.","sidebar":"tutorialSidebar"},"ZK/Listbox":{"id":"ZK/Listbox","title":"ZK Framework: Listbox Component Manual","description":"The Listbox component in ZK Framework is a versatile UI component used to display a list of items in a tabular format. It is highly customizable, supports data binding, and can be used for both simple and complex data representations. This manual provides a comprehensive overview of the Listbox component, including its subcomponents, attributes, events, data binding capabilities, and practical examples.","sidebar":"tutorialSidebar"},"ZK/Mvc Vs Mvvm":{"id":"ZK/Mvc Vs Mvvm","title":"MVC vs MVVM","description":"The ZK framework provides support for both MVC and MVVM architectures.","sidebar":"tutorialSidebar"},"ZK/Navigation Guide":{"id":"ZK/Navigation Guide","title":"ZK Framework Navigation Guide","description":"Controller-Based Navigation Methods","sidebar":"tutorialSidebar"},"ZK/Opening And Handling Modals":{"id":"ZK/Opening And Handling Modals","title":"Opening and Handling Modals","description":"Opening modals, passing parameters, and receiving data back in ZK can be done efficiently in both MVC and MVVM patterns. However, MVVM provides a more modern and clean approach, especially for complex applications where separation of concerns and data binding are critical.","sidebar":"tutorialSidebar"},"ZK/Reusable Components":{"id":"ZK/Reusable Components","title":"Reusable Components","description":"Reusable Components","sidebar":"tutorialSidebar"},"ZK/Ui Update":{"id":"ZK/Ui Update","title":"UI Refresh in ZK Framework: MVC vs MVVM","description":"In ZK, managing UI updates and refreshing the view in response to data changes is a critical aspect of building dynamic web applications. The approach to UI refresh can vary significantly depending on whether you are using the MVC (Model-View-Controller) pattern or the MVVM (Model-View-ViewModel) pattern. This document provides a detailed comparison of UI refresh strategies in both architectural patterns.","sidebar":"tutorialSidebar"},"ZK/Zul file":{"id":"ZK/Zul file","title":"Zul File","description":"Window Configuration:","sidebar":"tutorialSidebar"},"ZK/ZUL Page Lifecycle":{"id":"ZK/ZUL Page Lifecycle","title":"ZUL Page Lifecycle","description":"The ZK framework provides two key annotations, @init and @AfterCompose, for handling component initialization and ViewModel setup in ZK-based applications. While both methods serve the purpose of initializing components and assigning variables in the ViewModel, they differ in terms of when they are executed during the ZUL page lifecycle.","sidebar":"tutorialSidebar"}}}}')}}]);