"use strict";(self.webpackChunktkbook=self.webpackChunktkbook||[]).push([[8872],{60:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"Java & Spring/Creating new Entity","title":"Repository, Manager, and Test","description":"When working with an older Spring project that doesn\'t use the annotation-based configuration typical in Spring Boot, you would need to configure your DAO, Entity, and Service in XML files.","source":"@site/docs/Java & Spring/Creating new Entity.md","sourceDirName":"Java & Spring","slug":"/Java & Spring/Creating new Entity","permalink":"/tk_book/Java & Spring/Creating new Entity","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Comparing Objects in Java","permalink":"/tk_book/Java & Spring/Comparing Objects"},"next":{"title":"DAO Implementation Guide","permalink":"/tk_book/Java & Spring/DAO Implementation"}}');var a=t(4848),i=t(8453);const o={},s="Repository, Manager, and Test",c={},l=[{value:"Injecting DAO into Service",id:"injecting-dao-into-service",level:2},{value:"Writing Tests",id:"writing-tests",level:2},{value:"Optional: Including Tests in pom.xml",id:"optional-including-tests-in-pomxml",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"repository-manager-and-test",children:"Repository, Manager, and Test"})}),"\n",(0,a.jsx)(n.p,{children:"When working with an older Spring project that doesn't use the annotation-based configuration typical in Spring Boot, you would need to configure your DAO, Entity, and Service in XML files."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:'<beans>\r\n \r\n    \x3c!-- Copy From Here--\x3e\r\n    <bean id="!name!" parent="abstractDao">\r\n        <property name="proxyInterfaces">\r\n            <value>!packageName.DaoClassName!</value>\r\n        </property>\r\n        <property name="target">\r\n            <bean parent="abstractDaoTarget">\r\n                <constructor-arg>\r\n                    <value>!packageName.EntityName!</value>\r\n                </constructor-arg>\r\n            </bean>\r\n        </property>\r\n    </bean>\r\n    \x3c!-- Till Here --\x3e\r\n</beans>\n'})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"id attribute:"})," This attribute provides a unique identifier for the bean within the Spring application context. In this case, the bean is identified as ",(0,a.jsx)(n.code,{children:"contexteDao"}),". Other parts of the application can refer to this bean by its id."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"parent attribute:"})," This attribute specifies the parent bean from which the current bean inherits configuration. In this example, ",(0,a.jsx)(n.code,{children:"contexteDao"})," inherits configurations from a bean named ",(0,a.jsx)(n.code,{children:"abstractDao"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"property element (proxyInterfaces):"})," The property element is used to set a property on the bean. In this case, it sets the ",(0,a.jsx)(n.code,{children:"proxyInterfaces"})," property to the specified value. This property is likely used by Spring to create a proxy for the DAO interface. The value is the fully qualified class name of the interface implemented by the DAO, which is ",(0,a.jsx)(n.code,{children:"fr.aphp.tumorotek.dao.contexte.ContexteDao"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"property element (target):"})," Similar to the previous property, this sets the ",(0,a.jsx)(n.code,{children:"target"})," property. The target property usually specifies the actual object to which method calls on the proxy will be delegated. In this example, it points to another bean (",(0,a.jsx)(n.code,{children:"abstractDaoTarget"}),") which is presumably responsible for creating instances of the target class (",(0,a.jsx)(n.code,{children:"fr.aphp.tumorotek.model.contexte.Contexte"}),")."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"bean element (abstractDaoTarget):"})," This defines another bean named ",(0,a.jsx)(n.code,{children:"abstractDaoTarget"}),". The parent attribute is likely used to inherit configurations from a common parent, and the constructor-arg element sets..."]}),"\n",(0,a.jsx)(n.h2,{id:"injecting-dao-into-service",children:"Injecting DAO into Service"}),"\n",(0,a.jsx)(n.p,{children:"When you want to use a DAO inside a service (manager), you typically inject the DAO as a dependency into the service bean."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:'<beans>\r\n\r\n    \x3c!-- Configure UserService bean --\x3e\r\n    <bean id="userService" class="com.example.service.UserService">\r\n        <property name="userDao" ref="userDao" />\r\n    </bean>\r\n\r\n</beans>\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"bean element (userService):"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"id attribute:"})," Unique identifier for the bean within..."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"writing-tests",children:"Writing Tests"}),"\n",(0,a.jsx)(n.p,{children:"Extend an AbstractDaoTest and create necessary methods for testing."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'public class ParametreDaoTest extends AbstractDaoTest {\r\n\r\n   private ParametreDao parametreDao;\r\n\r\n   public void setParametreDao(ParametreDao parametreDao) {\r\n      this.parametreDao = parametreDao;\r\n   }\r\n\r\n   public void testFindByPlateformeIdAndCode() {\r\n      Integer plateformID = 1;\r\n      String code = "welcome.message";\r\n\r\n      Parametre newParametre = new Parametre();\r\n      newParametre.setPlateformeId(plateformID);\r\n      newParametre.setCode(code);\r\n\r\n      parametreD...\n'})}),"\n",(0,a.jsx)(n.h2,{id:"optional-including-tests-in-pomxml",children:"Optional: Including Tests in pom.xml"}),"\n",(0,a.jsx)(n.p,{children:"You can include tests in your Maven build configuration using plugins like maven-surefire-plugin."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:"\x3c!-- pom.xml --\x3e\r\n<build>\r\n    <plugins>\r\n        <plugin>\r\n            <groupId>org.apache.maven.plugins</groupId>\r\n            <artifactId>maven-surefire-plugin</artifactId>\r\n            <version>3.0.0-M5</version>\r\n            ...\r\n        </plugin>\r\n    </plugins>\r\n</build>\r\n\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var r=t(6540);const a={},i=r.createContext(a);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);