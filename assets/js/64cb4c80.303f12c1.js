"use strict";(self.webpackChunktkbook=self.webpackChunktkbook||[]).push([[8817],{4626:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Libraries/Liquibase","title":"Liquibase","description":"Liquibase is an open-source library for managing and applying database schema changes across environments in a systematic and version-controlled manner. It supports various formats (XML, YAML, JSON, SQL) for defining changes and ensures reliable deployments with rollback and audit capabilities.","source":"@site/docs/Libraries/Liquibase.md","sourceDirName":"Libraries","slug":"/Libraries/Liquibase","permalink":"/tk_book/Libraries/Liquibase","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Liquibase In TK","permalink":"/tk_book/Libraries/Liquibase In TK"},"next":{"title":"Dependency Management in Java Projects","permalink":"/tk_book/Security/Dependencies"}}');var a=i(4848),r=i(8453);const o={},t="Liquibase",l={},c=[{value:"Key Benefits",id:"key-benefits",level:2},{value:"Core Concepts",id:"core-concepts",level:2},{value:"Changelog Files",id:"changelog-files",level:3},{value:"Database Tables",id:"database-tables",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Basic Setup",id:"basic-setup",level:3},{value:"Connection Options",id:"connection-options",level:3},{value:"How Liquibase Works",id:"how-liquibase-works",level:2},{value:"Running Commands",id:"running-commands",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Integrating Liquibase with Tumorotek",id:"integrating-liquibase-with-tumorotek",level:2},{value:"Maven Configuration",id:"maven-configuration",level:3},{value:"Example: Introducing a New Table",id:"example-introducing-a-new-table",level:3},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"liquibase",children:"Liquibase"})}),"\n",(0,a.jsx)(n.p,{children:"Liquibase is an open-source library for managing and applying database schema changes across environments in a systematic and version-controlled manner. It supports various formats (XML, YAML, JSON, SQL) for defining changes and ensures reliable deployments with rollback and audit capabilities."}),"\n",(0,a.jsx)(n.h2,{id:"key-benefits",children:"Key Benefits"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Schema Version Control:"})," Tracks all schema modifications"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Automated Updates:"})," Minimizes human error by automating schema deployments"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Consistency Across Environments:"})," Ensures dev, test, and production have identical schemas"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Rollback Support:"})," Enables safe reversion of changes"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Audit Compliance:"})," Maintains an audit trail of changes"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,a.jsx)(n.h3,{id:"changelog-files",children:"Changelog Files"}),"\n",(0,a.jsxs)(n.p,{children:["A changelog file defines the database modifications in a series of atomic units called ",(0,a.jsx)(n.strong,{children:"changesets"}),". Common commands include ",(0,a.jsx)(n.code,{children:"<createTable>"}),", ",(0,a.jsx)(n.code,{children:"<addColumn>"}),", and ",(0,a.jsx)(n.code,{children:"<sql>"}),". Changesets support ",(0,a.jsx)(n.strong,{children:"preconditions"})," for environment validation and ",(0,a.jsx)(n.strong,{children:"contexts/labels"})," to control when they execute."]}),"\n",(0,a.jsx)(n.h3,{id:"database-tables",children:"Database Tables"}),"\n",(0,a.jsx)(n.p,{children:"Liquibase uses two primary tables to track changes:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"DATABASECHANGELOG"})}),": Stores records of applied changes"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"DATABASECHANGELOGLOCK"})}),": Prevents concurrent modifications"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,a.jsx)(n.h3,{id:"basic-setup",children:"Basic Setup"}),"\n",(0,a.jsxs)(n.p,{children:["To configure Liquibase for your Tumorotek project, edit ",(0,a.jsx)(n.code,{children:"tumorotek-webapp/src/main/resources/liquibase/liquibase.properties"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-properties",children:"url=jdbc:mysql://localhost:3306/your_database\r\nusername=your_username\r\npassword=your_password\n"})}),"\n",(0,a.jsx)(n.h3,{id:"connection-options",children:"Connection Options"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Properties File"}),": Configure the database URL and credentials in a ",(0,a.jsx)(n.code,{children:"properties"})," file."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Changelog File"}),": For environment-specific setups, you can define connection details directly in the changelog file."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"how-liquibase-works",children:"How Liquibase Works"}),"\n",(0,a.jsx)(n.p,{children:"Liquibase applies database changes by reading the changelog file and updating the database according to pending changes:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Lock Verification"}),": Checks ",(0,a.jsx)(n.code,{children:"DATABASECHANGELOGLOCK"})," for other active processes."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Changelog Processing"}),": Reads the changelog and validates each change."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Change Application"}),": Executes pending changes."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Record Keeping"}),": Updates ",(0,a.jsx)(n.code,{children:"DATABASECHANGELOG"})," with applied changes."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Lock Release"}),": Clears ",(0,a.jsx)(n.code,{children:"DATABASECHANGELOGLOCK"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Tomcat starts and begins deploying your web application"}),"\n",(0,a.jsx)(n.li,{children:"Your application's context is initialized"}),"\n",(0,a.jsx)(n.li,{children:"During context initialization, Liquibase is triggered (via Spring or your custom code)"}),"\n",(0,a.jsx)(n.li,{children:"Liquibase Connects to your database"}),"\n",(0,a.jsx)(n.li,{children:"Liquibase Checks the DATABASECHANGELOG table to see what changesets have already been applied"}),"\n",(0,a.jsx)(n.li,{children:"Liquibase Compares that with your changelog master file"}),"\n",(0,a.jsx)(n.li,{children:"Liquibase Applies any new changesets that haven't been run yet"}),"\n",(0,a.jsx)(n.li,{children:"Liquibase Updates the DATABASECHANGELOG table with records of the newly applied changes"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Your application continues initializing other components\r\nTomcat completes deployment and starts handling requests"}),"\n",(0,a.jsx)(n.h3,{id:"running-commands",children:"Running Commands"}),"\n",(0,a.jsxs)(n.p,{children:["To run Liquibase, ensure that the ",(0,a.jsx)(n.code,{children:"liquibase.properties"})," file has correct database configurations. Then, you can execute commands such as:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"liquibase update\n"})}),"\n",(0,a.jsx)(n.p,{children:"If you encounter a lock error, check and release it with:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM DATABASECHANGELOGLOCK WHERE ID = 1;\r\n\r\nUPDATE DATABASECHANGELOGLOCK SET LOCKED = 0, LOCKGRANTED = NULL, LOCKEDBY = NULL WHERE ID = 1;\n"})}),"\n",(0,a.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Lock Errors"}),": Check the ",(0,a.jsx)(n.code,{children:"DATABASECHANGELOGLOCK"})," table. Release a lock with the ",(0,a.jsx)(n.code,{children:"UPDATE"})," query above."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Re-running Changes"}),": To force rerun, delete the specific changeset entry in ",(0,a.jsx)(n.code,{children:"DATABASECHANGELOG"})," and execute ",(0,a.jsx)(n.code,{children:"liquibase update"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"integrating-liquibase-with-tumorotek",children:"Integrating Liquibase with Tumorotek"}),"\n",(0,a.jsx)(n.h3,{id:"maven-configuration",children:"Maven Configuration"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"tumorotek-webapp"}),": Contains the Liquibase execution configurations."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"tumorotek-model"}),": Manages version-specific behavior and schema definitions."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"example-introducing-a-new-table",children:"Example: Introducing a New Table"}),"\n",(0,a.jsxs)(n.p,{children:["To create a new table, ",(0,a.jsx)(n.code,{children:"PARAMETRE_VALEUR_SPECIFIQUE"}),", use the following format:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:'<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"\r\n                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\r\n                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog\r\n                   http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.10.xsd">\r\n\r\n    <changeSet author="your_author_name" id="createTable_PARAMETRE_VALEUR_SPECIFIQUE">\r\n        <createTable tableName="PARAMETRE_VALEUR_SPECIFIQUE">\r\n            <column name="parameterId" type="INT">\r\n                <constraints primaryKey="true" nullable="false"/>\r\n            </column>\r\n            \x3c!-- Add other columns as needed --\x3e\r\n        </createTable>\r\n    </changeSet>\r\n\r\n</databaseChangeLog>\n'})}),"\n",(0,a.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Use descriptive changeset IDs and authors."}),"\n",(0,a.jsx)(n.li,{children:"Include rollback instructions where possible."}),"\n",(0,a.jsx)(n.li,{children:"Test changes in development environments before production."}),"\n",(0,a.jsx)(n.li,{children:"Maintain clear documentation of all changes."}),"\n",(0,a.jsx)(n.li,{children:"Use contexts to apply environment-specific changes only when needed."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>t});var s=i(6540);const a={},r=s.createContext(a);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);