"use strict";(self.webpackChunktkbook=self.webpackChunktkbook||[]).push([[4983],{9813:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var i=t(4848),s=t(8453);const r={},o="Developer's best practices",c={id:"Best Practice/Developer'S Best Practices",title:"Developer's best practices",description:"These principles aim to enhance code quality, reduce complexity, and facilitate collaboration among developers.",source:"@site/docs/Best Practice/Developer'S Best Practices.md",sourceDirName:"Best Practice",slug:"/Best Practice/Developer'S Best Practices",permalink:"/tk_book/docs/Best Practice/Developer'S Best Practices",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Collaboration Best Practices",permalink:"/tk_book/docs/Best Practice/Collaboration Best Practices"},next:{title:"Development Best practices",permalink:"/tk_book/docs/Best Practice/Development Best practices"}},a={},l=[{value:"General Best Practices",id:"general-best-practices",level:2},{value:"Writing Methods Best Practices",id:"writing-methods-best-practices",level:2}];function d(e){const n={em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"developers-best-practices",children:"Developer's best practices"})}),"\n",(0,i.jsx)(n.p,{children:"These principles aim to enhance code quality, reduce complexity, and facilitate collaboration among developers."}),"\n",(0,i.jsx)(n.h2,{id:"general-best-practices",children:"General Best Practices"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"KISS (Keep It Simple, Stupid):"})," Strive for simplicity in design and implementation. Avoid unnecessary complexity that can hinder understanding and maintenance."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"DRY (Don't Repeat Yourself):"})," Eliminate redundancy in code by abstracting common functionalities into reusable components, promoting maintainability and reducing errors."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"YAGNI (You Ain't Gonna Need It):"})," Only implement features necessary for current requirements. Avoid speculative development to prevent unnecessary complexity."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Boy Scout Rule:"})," Leave the codebase in a better state than you found it. Consistently improve code quality through small, incremental enhancements."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Regularly Remove Dead Code:"})," Identify and eliminate unused or obsolete code to maintain a clean, efficient, and secure software environment, reducing complexity and aiding future maintenance."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Single Source of Truth:"})," Keep one authoritative source for a particular piece of information to avoid inconsistencies and ensure data integrity."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Test-Driven Development (TDD):"})," Write unit tests before writing the code to ensure the code meets specified requirements, promoting robustness and aiding in code refactoring."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Don't Make Me Think:"})," Design software and interfaces to be intuitive, requiring minimal cognitive effort from users for enhanced user experience."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Comprehensive Documentation:"})," Include detailed comments, function descriptions, and relevant information in the source code to facilitate understanding and maintenance, ensuring transparency for developers."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"writing-methods-best-practices",children:"Writing Methods Best Practices"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Single Responsibility Principle (SRP):"})," Ensure each method has a single responsibility, promoting modularity and improving code comprehension."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Descriptive and Meaningful Names:"})," Choose names that clearly convey the purpose of the method for better readability and understanding."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Consistent Naming Conventions:"})," Follow a consistent naming convention across the codebase to enhance readability and maintain a unified coding style."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Avoid Magic Numbers and Strings:"})," Refactor code to eliminate magic numbers or strings, using constants or enumerations for better code maintainability."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Method Length:"})," Keep methods short..."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"(The text continues with more writing methods best practices)"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var i=t(6540);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);